// Generated by view binder compiler. Do not edit!
package com.example.mybudget.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CalendarView;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mybudget.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PageNewExpenseBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final TextView budgetTitle;

  @NonNull
  public final TextView budgetTitleTo;

  @NonNull
  public final MaterialButton buttonAddIncome;

  @NonNull
  public final CalendarView calendarViewBudget;

  @NonNull
  public final CalendarView calendarViewCategory;

  @NonNull
  public final TextView categoryTitle;

  @NonNull
  public final TextView currencyExpence;

  @NonNull
  public final TextView currencyNew;

  @NonNull
  public final TextView equalSymbolNewExpence;

  @NonNull
  public final RadioButton expence;

  @NonNull
  public final TextView expenceIncomeDate;

  @NonNull
  public final RadioButton income;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final TextView operation;

  @NonNull
  public final Spinner periodOfNotification;

  @NonNull
  public final TextView periodOfNotificationTitle;

  @NonNull
  public final RadioGroup radioGroupNewExpence;

  @NonNull
  public final EditText savingsValue;

  @NonNull
  public final Spinner spinnerBudget;

  @NonNull
  public final Spinner spinnerBudgetTo;

  @NonNull
  public final Spinner spinnerCategory;

  @NonNull
  public final TextView timeOfNotifications;

  @NonNull
  public final TextView timeOfNotificationsTitle;

  @NonNull
  public final RadioButton transfer;

  @NonNull
  public final EditText translateValueNew;

  private PageNewExpenseBinding(@NonNull CoordinatorLayout rootView, @NonNull TextView budgetTitle,
      @NonNull TextView budgetTitleTo, @NonNull MaterialButton buttonAddIncome,
      @NonNull CalendarView calendarViewBudget, @NonNull CalendarView calendarViewCategory,
      @NonNull TextView categoryTitle, @NonNull TextView currencyExpence,
      @NonNull TextView currencyNew, @NonNull TextView equalSymbolNewExpence,
      @NonNull RadioButton expence, @NonNull TextView expenceIncomeDate,
      @NonNull RadioButton income, @NonNull LinearLayout linearLayout, @NonNull TextView operation,
      @NonNull Spinner periodOfNotification, @NonNull TextView periodOfNotificationTitle,
      @NonNull RadioGroup radioGroupNewExpence, @NonNull EditText savingsValue,
      @NonNull Spinner spinnerBudget, @NonNull Spinner spinnerBudgetTo,
      @NonNull Spinner spinnerCategory, @NonNull TextView timeOfNotifications,
      @NonNull TextView timeOfNotificationsTitle, @NonNull RadioButton transfer,
      @NonNull EditText translateValueNew) {
    this.rootView = rootView;
    this.budgetTitle = budgetTitle;
    this.budgetTitleTo = budgetTitleTo;
    this.buttonAddIncome = buttonAddIncome;
    this.calendarViewBudget = calendarViewBudget;
    this.calendarViewCategory = calendarViewCategory;
    this.categoryTitle = categoryTitle;
    this.currencyExpence = currencyExpence;
    this.currencyNew = currencyNew;
    this.equalSymbolNewExpence = equalSymbolNewExpence;
    this.expence = expence;
    this.expenceIncomeDate = expenceIncomeDate;
    this.income = income;
    this.linearLayout = linearLayout;
    this.operation = operation;
    this.periodOfNotification = periodOfNotification;
    this.periodOfNotificationTitle = periodOfNotificationTitle;
    this.radioGroupNewExpence = radioGroupNewExpence;
    this.savingsValue = savingsValue;
    this.spinnerBudget = spinnerBudget;
    this.spinnerBudgetTo = spinnerBudgetTo;
    this.spinnerCategory = spinnerCategory;
    this.timeOfNotifications = timeOfNotifications;
    this.timeOfNotificationsTitle = timeOfNotificationsTitle;
    this.transfer = transfer;
    this.translateValueNew = translateValueNew;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PageNewExpenseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PageNewExpenseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.page_new_expense, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PageNewExpenseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.budgetTitle;
      TextView budgetTitle = ViewBindings.findChildViewById(rootView, id);
      if (budgetTitle == null) {
        break missingId;
      }

      id = R.id.budgetTitleTo;
      TextView budgetTitleTo = ViewBindings.findChildViewById(rootView, id);
      if (budgetTitleTo == null) {
        break missingId;
      }

      id = R.id.buttonAddIncome;
      MaterialButton buttonAddIncome = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddIncome == null) {
        break missingId;
      }

      id = R.id.calendarViewBudget;
      CalendarView calendarViewBudget = ViewBindings.findChildViewById(rootView, id);
      if (calendarViewBudget == null) {
        break missingId;
      }

      id = R.id.calendarViewCategory;
      CalendarView calendarViewCategory = ViewBindings.findChildViewById(rootView, id);
      if (calendarViewCategory == null) {
        break missingId;
      }

      id = R.id.categoryTitle;
      TextView categoryTitle = ViewBindings.findChildViewById(rootView, id);
      if (categoryTitle == null) {
        break missingId;
      }

      id = R.id.currencyExpence;
      TextView currencyExpence = ViewBindings.findChildViewById(rootView, id);
      if (currencyExpence == null) {
        break missingId;
      }

      id = R.id.currencyNew;
      TextView currencyNew = ViewBindings.findChildViewById(rootView, id);
      if (currencyNew == null) {
        break missingId;
      }

      id = R.id.equalSymbolNewExpence;
      TextView equalSymbolNewExpence = ViewBindings.findChildViewById(rootView, id);
      if (equalSymbolNewExpence == null) {
        break missingId;
      }

      id = R.id.expence;
      RadioButton expence = ViewBindings.findChildViewById(rootView, id);
      if (expence == null) {
        break missingId;
      }

      id = R.id.expenceIncomeDate;
      TextView expenceIncomeDate = ViewBindings.findChildViewById(rootView, id);
      if (expenceIncomeDate == null) {
        break missingId;
      }

      id = R.id.income;
      RadioButton income = ViewBindings.findChildViewById(rootView, id);
      if (income == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.operation;
      TextView operation = ViewBindings.findChildViewById(rootView, id);
      if (operation == null) {
        break missingId;
      }

      id = R.id.periodOfNotification;
      Spinner periodOfNotification = ViewBindings.findChildViewById(rootView, id);
      if (periodOfNotification == null) {
        break missingId;
      }

      id = R.id.periodOfNotificationTitle;
      TextView periodOfNotificationTitle = ViewBindings.findChildViewById(rootView, id);
      if (periodOfNotificationTitle == null) {
        break missingId;
      }

      id = R.id.radioGroupNewExpence;
      RadioGroup radioGroupNewExpence = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupNewExpence == null) {
        break missingId;
      }

      id = R.id.savingsValue;
      EditText savingsValue = ViewBindings.findChildViewById(rootView, id);
      if (savingsValue == null) {
        break missingId;
      }

      id = R.id.spinnerBudget;
      Spinner spinnerBudget = ViewBindings.findChildViewById(rootView, id);
      if (spinnerBudget == null) {
        break missingId;
      }

      id = R.id.spinnerBudgetTo;
      Spinner spinnerBudgetTo = ViewBindings.findChildViewById(rootView, id);
      if (spinnerBudgetTo == null) {
        break missingId;
      }

      id = R.id.spinnerCategory;
      Spinner spinnerCategory = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCategory == null) {
        break missingId;
      }

      id = R.id.timeOfNotifications;
      TextView timeOfNotifications = ViewBindings.findChildViewById(rootView, id);
      if (timeOfNotifications == null) {
        break missingId;
      }

      id = R.id.timeOfNotificationsTitle;
      TextView timeOfNotificationsTitle = ViewBindings.findChildViewById(rootView, id);
      if (timeOfNotificationsTitle == null) {
        break missingId;
      }

      id = R.id.transfer;
      RadioButton transfer = ViewBindings.findChildViewById(rootView, id);
      if (transfer == null) {
        break missingId;
      }

      id = R.id.translateValueNew;
      EditText translateValueNew = ViewBindings.findChildViewById(rootView, id);
      if (translateValueNew == null) {
        break missingId;
      }

      return new PageNewExpenseBinding((CoordinatorLayout) rootView, budgetTitle, budgetTitleTo,
          buttonAddIncome, calendarViewBudget, calendarViewCategory, categoryTitle, currencyExpence,
          currencyNew, equalSymbolNewExpence, expence, expenceIncomeDate, income, linearLayout,
          operation, periodOfNotification, periodOfNotificationTitle, radioGroupNewExpence,
          savingsValue, spinnerBudget, spinnerBudgetTo, spinnerCategory, timeOfNotifications,
          timeOfNotificationsTitle, transfer, translateValueNew);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
